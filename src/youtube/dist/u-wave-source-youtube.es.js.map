{"version":3,"file":"u-wave-source-youtube.es.js","sources":["../src/util.js","../src/Client.js","../src/Importer.js","../src/index.js"],"sourcesContent":["import parseIsoDuration from 'parse-iso-duration';\nimport getArtistTitle from 'get-artist-title';\nimport getYouTubeID from 'get-youtube-id';\nimport chunk from 'chunk';\n\nconst rxSimplePlaylistUrl = /youtube\\.com\\/(?:playlist|watch)\\?.*?list=([a-z0-9_-]+)/i;\nconst rxPlaylistID = /^([a-z0-9_-]+)$/i;\n\n/**\n * Extract a playlist ID from a playlist URL.\n */\nexport function getPlaylistID(url) {\n  if (rxPlaylistID.test(url)) {\n    return url;\n  }\n\n  const match = url.match(rxSimplePlaylistUrl);\n  if (match) {\n    return match[1];\n  }\n\n  return null;\n}\n\nfunction parseYouTubeDuration(duration) {\n  return Math.round(parseIsoDuration(duration) / 1000);\n}\n\n/**\n * Get the highest quality available thumbnail for a video or playlist.\n */\nexport function getBestThumbnail(thumbnails) {\n  if (thumbnails) {\n    if (thumbnails.high) {\n      return thumbnails.high.url;\n    } else if (thumbnails.medium) {\n      return thumbnails.medium.url;\n    } else if (thumbnails.default) {\n      return thumbnails.default.url;\n    }\n  }\n  return '';\n}\n\nfunction getBlockedCountryCodes(contentDetails) {\n  if (contentDetails.regionRestriction) {\n    return contentDetails.regionRestriction.blocked || [];\n  }\n  return [];\n}\n\n/**\n * Convert a YouTube Video resource to a Ã¼Wave media object.\n */\nexport function normalizeMedia(video) {\n  const [artist, title] = getArtistTitle(video.snippet.title, {\n    defaultArtist: video.snippet.channelTitle,\n  });\n\n  return {\n    sourceID: video.id,\n    // TODO Fix the detection in get-artist-title so that it doesn't split the\n    // title into parts with only fluff.\n    artist: artist || '[unknown]',\n    title: title || '[unknown]',\n    duration: parseYouTubeDuration(video.contentDetails.duration),\n    thumbnail: getBestThumbnail(video.snippet.thumbnails),\n    sourceData: {\n      // Can be used by clients to determine the aspect ratio.\n      embedWidth: video.player ? parseInt(video.player.embedWidth, 10) : null,\n      embedHeight: video.player ? parseInt(video.player.embedHeight, 10) : null,\n      blockedIn: getBlockedCountryCodes(video.contentDetails),\n    },\n  };\n}\n\nasync function getVideosPage(client, sourceIDs) {\n  const data = await client.listVideos({\n    part: 'snippet,contentDetails,player',\n    fields: `\n      items(\n        id,\n        snippet(title, channelTitle, thumbnails),\n        contentDetails(duration, regionRestriction),\n        player(embedWidth, embedHeight)\n      )\n    `.replace(/\\s+/g, ''),\n    id: sourceIDs.join(','),\n    // These are the maximum acceptable values, we only send them to force\n    // YouTube to send an embedWidth and embedHeight back so we can calculate\n    // the video aspect ratio.\n    maxWidth: 8192,\n    maxHeight: 8192,\n  });\n\n  return data.items.map(normalizeMedia).filter(item => item.duration > 0);\n}\n\n/**\n * Fetch Video resources from the YouTube Data API.\n */\nexport async function getVideos(client, sourceIDs) {\n  const ids = sourceIDs.map(id => getYouTubeID(id) || id);\n\n  const pages = await Promise.all(chunk(ids, 50).map(page => getVideosPage(client, page)));\n  return pages.reduce((result, page) => result.concat(page), []);\n}\n","import fetch from 'node-fetch';\nimport qsStringify from 'qs-stringify';\n\n/**\n * A small YouTube Data API client.\n */\nexport default class YouTubeClient {\n  constructor(params) {\n    this.params = params;\n    this.baseUrl = 'https://www.googleapis.com/youtube/v3';\n  }\n\n  async get(resource, options) {\n    const query = qsStringify({ ...this.params, ...options });\n    const response = await fetch(`${this.baseUrl}/${resource}?${query}`);\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error.message);\n    }\n    return data;\n  }\n\n  search(options) {\n    return this.get('search', options);\n  }\n\n  listVideos(options) {\n    return this.get('videos', options);\n  }\n\n  listPlaylistItems(options) {\n    return this.get('playlistItems', options);\n  }\n\n  listPlaylists(options) {\n    return this.get('playlists', options);\n  }\n\n  listChannels(options) {\n    return this.get('channels', options);\n  }\n}\n","import { getPlaylistID, getVideos, getBestThumbnail } from './util';\n\nconst rxChannelUrl = /youtube\\.com\\/channel\\/([^/?#]+)/i;\nconst rxUserUrl = /youtube\\.com\\/user\\/([^/?#]+)/i;\n\nconst getPlaylistsOptions = {\n  part: 'snippet,contentDetails',\n  fields: `\n    items(\n      id,\n      snippet/title,\n      snippet/description,\n      snippet/channelTitle,\n      snippet/thumbnails,\n      contentDetails/itemCount\n    ),\n    pageInfo,\n    nextPageToken\n  `.replace(/\\s+/g, ''),\n  maxResults: 50,\n};\n\nexport default class YouTubeImport {\n  constructor(client) {\n    this.client = client;\n  }\n\n  async getPlaylistPage(playlistID, page = null) {\n    const data = await this.client.listPlaylistItems({\n      part: 'contentDetails',\n      playlistId: playlistID,\n      maxResults: 50,\n      pageToken: page,\n    });\n\n    return {\n      nextPage: data.nextPageToken,\n      items: data.items,\n    };\n  }\n\n  async getPlaylistItems(playlistID) {\n    let page = null;\n    const playlistItems = [];\n    try {\n      do {\n        // This `await` is OK since we need to fetch this page to find out how\n        // to fetch the next.\n        // eslint-disable-next-line no-await-in-loop\n        const res = await this.getPlaylistPage(playlistID, page);\n        page = res.nextPage;\n        playlistItems.push(...res.items);\n      } while (page);\n    } catch (e) {\n      throw new Error('That playlist could not be imported. If it\\'s a private playlist, ' +\n        'change its visibility to Unlisted and try again.');\n    }\n\n    const ids = playlistItems.map(item => item.contentDetails.videoId);\n    const medias = await getVideos(this.client, ids);\n\n    return medias.map(media => ({\n      ...media,\n      start: 0,\n      end: media.duration,\n    }));\n  }\n\n  async getPlaylistMeta(playlistID) {\n    const data = await this.client.listPlaylists({\n      part: 'snippet',\n      fields: 'items(id,snippet/title)',\n      id: playlistID,\n      maxResults: 1,\n    });\n    return data.items[0];\n  }\n\n  async getImportablePlaylist(url) {\n    const playlistID = getPlaylistID(url);\n    if (!playlistID) {\n      throw new Error('Invalid playlist URL. Please provide a direct link to the playlist ' +\n        'you want to import.');\n    }\n    const playlist = await this.getPlaylistMeta(playlistID);\n    const items = await this.getPlaylistItems(playlistID);\n    return {\n      playlist: {\n        sourceID: playlist.id,\n        name: playlist.snippet.title,\n      },\n      items,\n    };\n  }\n\n  async getChannelMeta(url) {\n    let match = url.match(rxChannelUrl);\n    const request = {\n      part: 'snippet,contentDetails',\n      fields: `\n        items(\n          id,\n          snippet/title,\n          contentDetails/relatedPlaylists/favorites,\n          contentDetails/relatedPlaylists/uploads\n        )\n      `.replace(/\\s+/g, ''),\n      maxResults: 1,\n    };\n    if (match) {\n      request.id = match[1]; // eslint-disable-line prefer-destructuring\n    } else {\n      match = url.match(rxUserUrl);\n      if (match) {\n        request.forUsername = match[1]; // eslint-disable-line prefer-destructuring\n      } else {\n        throw new Error('Invalid channel URL. Please provide a direct link to the channel or ' +\n          'user you want to import playlists from.');\n      }\n    }\n\n    const data = await this.client.listChannels(request);\n    if (data.items.length > 1) {\n      throw new Error('That channel could not be found. Please check that you provided the ' +\n        'full URL to the channel.');\n    }\n\n    const channel = data.items[0];\n    return {\n      id: channel.id,\n      title: channel.snippet.title,\n      playlists: channel.contentDetails.relatedPlaylists,\n    };\n  }\n\n  async getChannelPlaylistsPage(channelID, page = null) {\n    const data = await this.client.listPlaylists({\n      ...getPlaylistsOptions,\n      channelId: channelID,\n      pageToken: page,\n    });\n\n    return {\n      nextPage: data.nextPageToken,\n      items: data.items,\n    };\n  }\n\n  async getChannelPlaylists(channelID) {\n    const playlists = [];\n    let page;\n    do {\n      // This `await` is OK since we need to fetch this page to find out how\n      // to fetch the next.\n      // eslint-disable-next-line no-await-in-loop\n      const res = await this.getChannelPlaylistsPage(channelID, page);\n      page = res.nextPage;\n      playlists.push(...res.items);\n    } while (page);\n\n    return playlists;\n  }\n\n  async getSpecialChannelPlaylists(channel) {\n    const data = await this.client.listPlaylists({\n      ...getPlaylistsOptions,\n      id: Object.values(channel.playlists).join(','),\n    });\n    return data.items;\n  }\n\n  async getPlaylistMetasForUser(url) {\n    const channel = await this.getChannelMeta(url);\n\n    const specials = this.getSpecialChannelPlaylists(channel);\n    const playlists = this.getChannelPlaylists(channel.id);\n\n    const result = await Promise.all([specials, playlists]);\n\n    const allPlaylists = result[0].concat(result[1]);\n\n    return {\n      channel: { id: channel.id, title: channel.title },\n      playlists: allPlaylists.map(item => ({\n        sourceID: item.id,\n        sourceChannel: item.snippet.channelTitle,\n        name: item.snippet.title,\n        description: item.snippet.description,\n        size: item.contentDetails.itemCount,\n        thumbnail: getBestThumbnail(item.snippet.thumbnails),\n      })),\n    };\n  }\n}\n","import getYouTubeID from 'get-youtube-id';\nimport { getVideos } from './util';\nimport YouTubeClient from './Client';\nimport Importer from './Importer';\n\nconst defaultSearchOptions = {\n  part: 'id,snippet',\n  fields: `\n    items(id/videoId, snippet/liveBroadcastContent),\n    pageInfo,\n    nextPageToken,\n    prevPageToken\n  `.replace(/\\s+/g, ''),\n  type: 'video',\n  maxResults: 50,\n  safeSearch: 'none',\n  videoSyndicated: true,\n};\n\nexport default function youTubeSource(uw, opts = {}) {\n  if (!opts.key) {\n    throw new TypeError('Expected a YouTube API key in \"options.key\". For information on how to ' +\n      'configure your YouTube API access, see ' +\n      'https://developers.google.com/youtube/v3/getting-started.');\n  }\n\n  const params = opts.key ? { key: opts.key } : {};\n  const searchOptions = opts.search || {};\n  const client = new YouTubeClient(params);\n\n  const importer = new Importer(client);\n\n  function get(sourceIDs) {\n    return getVideos(client, sourceIDs);\n  }\n\n  async function search(query, page = null) {\n    // When searching for a video URL, we want to search for the video ID\n    // only, because search results are very inconsistent with some types of\n    // URLs.\n    const id = getYouTubeID(query, { fuzzy: false });\n    const data = await client.search({\n      ...defaultSearchOptions,\n      ...searchOptions,\n      q: id ? `\"${id}\"` : query,\n      pageToken: page,\n    });\n\n    const isVideo = item => item.id && item.id.videoId;\n    const isBroadcast = item => item.snippet && item.snippet.liveBroadcastContent !== 'none';\n\n    return get(data.items\n      .filter(item => isVideo(item) && !isBroadcast(item))\n      .map(item => item.id.videoId));\n  }\n\n  async function doImport(ctx, name, playlistID) {\n    const items = await importer.getPlaylistItems(playlistID);\n    return ctx.createPlaylist(name, items);\n  }\n\n  return {\n    name: 'youtube',\n    search,\n    get: get, // eslint-disable-line object-shorthand\n    import: async (ctx, action) => {\n      if (action.action === 'channel') {\n        return importer.getPlaylistMetasForUser(action.url);\n      }\n      if (action.action === 'playlist') {\n        const importable = await importer.getImportablePlaylist(action.url);\n        importable.items = ctx.source.addSourceType(importable.items);\n        return importable;\n      }\n      if (action.action === 'importplaylist') {\n        return doImport(ctx, action.name, action.id);\n      }\n\n      throw new TypeError(`Unknown action \"${action}\"`);\n    },\n  };\n}\n"],"names":["rxSimplePlaylistUrl","rxPlaylistID","getPlaylistID","url","test","match","parseYouTubeDuration","duration","Math","round","parseIsoDuration","getBestThumbnail","thumbnails","high","medium","default","getBlockedCountryCodes","contentDetails","regionRestriction","blocked","normalizeMedia","video","artist","title","getArtistTitle","snippet","channelTitle","id","player","parseInt","embedWidth","embedHeight","getVideosPage","client","sourceIDs","data","listVideos","replace","join","items","map","filter","item","getVideos","ids","getYouTubeID","pages","Promise","all","chunk","page","reduce","result","concat","YouTubeClient","params","baseUrl","get","resource","options","query","qsStringify","response","fetch","json","ok","Error","error","message","rxChannelUrl","rxUserUrl","getPlaylistsOptions","YouTubeImport","getPlaylistPage","playlistID","listPlaylistItems","nextPageToken","getPlaylistItems","playlistItems","res","nextPage","push","e","videoId","medias","media","getPlaylistMeta","listPlaylists","getImportablePlaylist","playlist","getChannelMeta","request","forUsername","listChannels","length","channel","relatedPlaylists","getChannelPlaylistsPage","channelID","getChannelPlaylists","playlists","getSpecialChannelPlaylists","Object","values","getPlaylistMetasForUser","specials","allPlaylists","description","itemCount","defaultSearchOptions","youTubeSource","uw","opts","key","TypeError","searchOptions","search","importer","Importer","isVideo","isBroadcast","liveBroadcastContent","doImport","ctx","name","createPlaylist","action","importable","source","addSourceType"],"mappings":"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"}